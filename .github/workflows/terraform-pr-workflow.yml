name: 'Terraform Pull Request'

on:
  # push:
  #   paths:
  #     - './'
  pull_request:

env:
  ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
  BACKEND_RESOURCE_GROUP_NAME: ${{ secrets.BACKEND_RESOURCE_GROUP }}
  BACKEND_STORAGE_ACCOUNT_NAME: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
  BACKEND_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER_NAME }}
  BACKEND_TF_STATE_FILE_NAME: test/inf.tfstate
  TERRAFORM_VERSION: 1.1.2
  TFSEC_VERSION: v1.13.0
  # TFSCAN_VERSION: ??

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Run Snyk to check Terraform configuration files for security issues
      # Snyk can be used to break the build when it detects security issues.
      # In this case we want to upload the issues to GitHub Code Scanning
      continue-on-error: true
      uses: snyk/actions/iac@14818c4695ecc4045f33c9cee9e795a788711ca4
      env:
        # In order to use the Snyk Action you will need to have a Snyk API token.
        # More details in https://github.com/snyk/actions#getting-your-snyk-token
        # or you can signup for free at https://snyk.io/login
        SNYK_TOKEN: ${{ secrets.JOVAN_SNYK_TOKEN }}
      with:
        # Add the path to the configuration file that you would like to test.
        # For example `deployment.yaml` for a Kubernetes deployment manifest
        # or `main.tf` for a Terraform configuration file
        file: main.tf

    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: snyk.sarif

    # Install the latest version of Terraform CLI and configure
    # the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: ${TERRAFORM_VERSION}

    # Initialize a new or existing Terraform working directory
    # by creating initial files, loading any remote state,
    # downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
        ${{ github.workspace }}/.github/scripts/terraform-task.sh init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: |
        ${{ github.workspace }}/.github/scripts/terraform-task.sh fmt

    # Terraform validate
    - name: Terraform Validate
      id: validate
      run: |
        ${{ github.workspace }}/.github/scripts/terraform-task.sh validate

    # tfsec version ?
    - name: Run tfsec check pr commenter
      uses: aquasecurity/tfsec-pr-commenter-action@main
      with:
        tfsec_version: ${{ env.TFSEC_VERSION }}
        github_token: ${{ github.token }}

    # tfsec version ?
    - name: Generate tfsec sarif report
      uses: tfsec/tfsec-sarif-action@master
      with:
        sarif_file: tfsec.sarif

 #   # tfsec version ?
 #   - name: Upload SARIF report
 #     if: ${{ !env.ACT }}
 #     uses: github/codeql-action/upload-sarif@v1
 #     with:
 #       sarif_file: tfsec.sarif

#    # tfsec version ?
#    - name: Run tfsec in dedicated docker container
#      uses: docker://aquasec/tfsec-ci:v.1.13.0
#      with:
#        args: tfsec

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: |
        ${{ github.workspace }}/.github/scripts/terraform-task.sh plan

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - uses: fregante/setup-git-user@v1
    - run: |
        git add results.json
        git commit --message 'Something cool'
    - run: git push